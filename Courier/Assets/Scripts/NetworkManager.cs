using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using Cysharp.Threading.Tasks;
// ‚Üê –¥–æ–±–∞–≤—å
using UnityEngine;

public class NetworkManager : MonoBehaviour
{
    public Action<string> newPlayerConnected;
    public Action<string> playerDisconnected;
    

    public static NetworkManager Instance;

    public string ServerIP = "127.0.0.1";
    public int TcpPort = 7777;
    public int UdpPort = 7778;

    private TcpMessageHandler _tcpMessageHandler;
    private UdpMessageHandler _udpMessageHandler;
    private TcpClient _tcpClient;
    private NetworkStream _tcpStream;
    private UdpClient _udpClient;
    private IPEndPoint _udpServerEP;
    private CancellationTokenSource _cancellationTokenSource;

    public string PlayerId { get; private set; } = "";
    public string Username = "Courier";

    private readonly Dictionary<string, RemotePlayer> _remotePlayers = new();
    public Dictionary<string, RemotePlayer> RemotePlayers => _remotePlayers;
    private bool _isInitialized = false;
    [SerializeField] private CameraManager _cameraManager;
    
    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
            return;
        }
    }

     private void Start()
    {
        ConnectToServer();
    }

    // ======================
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    // ======================

    public async void ConnectToServer()
    {
        _cancellationTokenSource = new CancellationTokenSource();
        _tcpMessageHandler = new TcpMessageHandler(this);
        _udpMessageHandler = new UdpMessageHandler(this);
        
        try
        {
            _tcpClient = new TcpClient();
            await _tcpClient.ConnectAsync(ServerIP, TcpPort);
            _tcpStream = _tcpClient.GetStream();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º LOGIN
            string loginMessage = $"LOGIN:{Username}\n";
            byte[] loginBytes = Encoding.UTF8.GetBytes(loginMessage);
            await _tcpStream.WriteAsync(loginBytes, 0, loginBytes.Length);

            // –ß–∏—Ç–∞–µ–º ID
            var lengthBytes = new byte[4];
            await _tcpStream.ReadAsync(lengthBytes, 0, 4);
            int length = BitConverter.ToInt32(lengthBytes, 0);

            var buffer = new byte[length];
            await _tcpStream.ReadAsync(buffer, 0, length);
            string json = Encoding.UTF8.GetString(buffer);
            Debug.Log($"[TCP] –ü–æ–ª—É—á–µ–Ω JSON: '{json}'");
            var loginResponse = JsonConvert.DeserializeObject<LoginResponse>(json);
            
            PlayerId = loginResponse.PlayerId;
            int typeCharacter = loginResponse.TypeCharacter;

                // ‚úÖ –î–ê–Å–ú –°–ï–†–í–ï–†–£ –í–†–ï–ú–Ø –û–¢–ü–†–ê–í–ò–¢–¨ –ó–ê–ö–ê–ó–´
                await UniTask.Delay(100); // –ü–∞—É–∑–∞ 100 –º—Å

                // ‚úÖ –ß–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑—ã
                await ReadInitialOrders();

                // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ TCP
                _ = ListenTcpAsync(_cancellationTokenSource.Token);

                // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º UDP
                _udpClient = new UdpClient(0);
                _udpServerEP = new IPEndPoint(IPAddress.Parse(ServerIP), UdpPort);
                _ = ListenUdpAsync(_cancellationTokenSource.Token);

                _isInitialized = true;
                var player = SpawnPlayer(typeCharacter);
                _cameraManager.SetTrackingTarget(player.CameraLook);
                player.SetTrasformFormCameraController(_cameraManager.StickToObject.gameObject);
            
        }
        catch (Exception ex)
        {
            Debug.LogError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + ex.Message);
        }
    }
    
    private async UniTask<string> ReadLineAsync(NetworkStream stream, CancellationToken token = default)
    {
        using (var ms = new MemoryStream())
        {
            byte[] buffer = new byte[1];
            while (await stream.ReadAsync(buffer, 0, 1, token) > 0)
            {
                if (buffer[0] == '\n')
                    break;
                if (buffer[0] != '\r') // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º \r
                    ms.Write(buffer, 0, 1);
            }
            return Encoding.UTF8.GetString(ms.ToArray());
        }
    }

    // ======================
    // –ß—Ç–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (—Å –∑–∞—â–∏—Ç–æ–π –∏ –ª–æ–≥–∞–º–∏)
    // ======================

    private async UniTask ReadInitialOrders()
    {
        try
        {
            // ‚úÖ –ñ–¥—ë–º, –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—è–≤—è—Ç—Å—è (–º–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫)
            int waitTimeMs = 0;
            while (_tcpClient.Available == 0 && waitTimeMs < 1000)
            {
                await UniTask.Delay(10);
                waitTimeMs += 10;
            }

            if (_tcpClient.Available == 0)
            {
                Debug.LogWarning("[TCP] –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                return;
            }

            // ‚úÖ –ß–∏—Ç–∞–µ–º 4 –±–∞–π—Ç–∞ –¥–ª–∏–Ω—ã
            var lengthBytes = new byte[4];
            int totalRead = 0;
            while (totalRead < 4 && _tcpClient?.Connected == true)
            {
                int read = await _tcpStream.ReadAsync(lengthBytes, totalRead, 4 - totalRead);
                if (read == 0) break;
                totalRead += read;
            }

            if (totalRead != 4)
            {
                Debug.LogError("[TCP] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å 4 –±–∞–π—Ç–∞ –¥–ª–∏–Ω—ã –∑–∞–∫–∞–∑–æ–≤");
                return;
            }

            int dataLength = BitConverter.ToInt32(lengthBytes, 0);

            // üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª–∏–Ω—ã
            if (dataLength <= 0 || dataLength > 1_000_000) // 1 –ú–ë –º–∞–∫—Å–∏–º—É–º
            {
                string hex = BitConverter.ToString(lengthBytes).Replace("-", " ");
                Debug.LogError($"[TCP] –û–®–ò–ë–ö–ê: –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö ({dataLength} –±–∞–π—Ç). Hex: {hex}");
                return;
            }

            Debug.Log($"[TCP] –û–∂–∏–¥–∞–µ–º {dataLength} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤");

            // ‚úÖ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            var dataBuffer = new byte[dataLength];
            totalRead = 0;
            while (totalRead < dataLength && _tcpClient?.Connected == true)
            {
                int read = await _tcpStream.ReadAsync(dataBuffer, totalRead, dataLength - totalRead);
                if (read == 0) break;
                totalRead += read;
            }

            if (totalRead != dataLength)
            {
                Debug.LogError($"[TCP] –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ {totalRead} –∏–∑ {dataLength} –±–∞–π—Ç");
                return;
            }

            string json = Encoding.UTF8.GetString(dataBuffer);
            Debug.Log($"[TCP] –ü–æ–ª—É—á–µ–Ω JSON –∑–∞–∫–∞–∑–æ–≤ (–¥–ª–∏–Ω–∞: {json.Length}): {json}");

            var orderUpdates = JsonConvert.DeserializeObject<OrderUpdate[]>(json);
            if (orderUpdates == null)
            {
                Debug.LogError("[TCP] –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤–µ—Ä–Ω—É–ª–∞ NULL");
                return;
            }

            Debug.Log($"[TCP] ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ {orderUpdates.Length} –∑–∞–∫–∞–∑–æ–≤");

            foreach (var update in orderUpdates)
            {
                if (update?.Order != null)
                {
                    Debug.Log($"[TCP] –ó–∞–∫–∞–∑: {update.Order.Description} (ID: {update.Order.Id}, –ù–∞–≥—Ä–∞–¥–∞: {update.Order.Reward})");
                    UIManager.Instance?.HandleOrderUpdate(update);
                }
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"[TCP] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {ex.Message}");
        }
    }

    // ======================
    // TCP Listener (—Ñ–æ–Ω–æ–≤—ã–π)
    // ======================

    private async UniTask ListenTcpAsync(CancellationToken token)
    {
        while (_tcpClient?.Connected == true && !token.IsCancellationRequested)
        {
            try
            {
                var lengthBytes = new byte[4];
                int totalRead = 0;
                while (totalRead < 4 && !token.IsCancellationRequested)
                {
                    int read = await _tcpStream.ReadAsync(lengthBytes, totalRead, 4 - totalRead, token);
                    if (read == 0) break;
                    totalRead += read;
                }
                if (totalRead != 4) break;

                int length = BitConverter.ToInt32(lengthBytes, 0);

                if (length <= 0 || length > 1_000_000)
                {
                    Debug.LogError($"[TCP] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —á—Ç–µ–Ω–∏–∏: {length}");
                    break;
                }

                var buffer = new byte[length];
                totalRead = 0;
                while (totalRead < length && !token.IsCancellationRequested)
                {
                    int read = await _tcpStream.ReadAsync(buffer, totalRead, length - totalRead, token);
                    if (read == 0) break;
                    totalRead += read;
                }
                if (totalRead != length) break;

                string json = Encoding.UTF8.GetString(buffer);
                Debug.Log($"[TCP] üîç –ü–û–õ–ù–´–ô –°–´–†–û–ô JSON: '{json}'");
                Debug.Log($"[TCP] üî¢ –î–ª–∏–Ω–∞: {json.Length}, –ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª: ' {json[0]}'");
                if (!_isInitialized)
                {
                    Debug.LogWarning("[TCP] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º: " + json);
                    continue;
                }

                _tcpMessageHandler.HandleMessage(json);
            }
            catch (OperationCanceledException)
            {
                Debug.Log("[TCP] –ü—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.");
                break;
            }
            catch (Exception ex)
            {
                Debug.LogError("TCP –æ—à–∏–±–∫–∞: " + ex.Message);
                break;
            }
        }
    }

    // ======================
    // UDP Listener
    // ======================

    private async UniTask ListenUdpAsync(CancellationToken token)
    {
        while (_udpClient != null && !token.IsCancellationRequested)
        {
            try
            {
                UdpReceiveResult result = await _udpClient.ReceiveAsync();
                string json = Encoding.UTF8.GetString(result.Buffer);

                _udpMessageHandler.HandleMessage(json);
            }
            catch (OperationCanceledException)
            {
                Debug.Log("[UDP] –ü—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.");
                break;
            }
            catch (Exception ex)
            {
                Debug.LogError("UDP –æ—à–∏–±–∫–∞: " + ex.Message);
            }
        }
    }

    // ======================
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    // ======================

    public async void SendMovementUpdate(PlayerPositionUpdate positionUpdate)
    {
        if (string.IsNullOrEmpty(PlayerId) || _udpClient == null || _udpServerEP == null) return;
       
        string json = JsonConvert.SerializeObject(positionUpdate);
        byte[] data = Encoding.UTF8.GetBytes(json);
        await _udpClient.SendAsync(data, data.Length, _udpServerEP);
    }


    private PlayerController SpawnPlayer(int typeCharacter)
    {
        var playerPrefab = Resources.Load<PlayerController>("Player");

        var player = Instantiate(playerPrefab, Vector3.zero, Quaternion.identity);

        player.SetCharacterType(typeCharacter);

        return player;
    }

    // ======================
    // –ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–æ–≤
    // ======================

    public async void TakeOrder(string orderId)
    {
        if (_tcpStream == null || !_tcpClient.Connected) return;
        
        var command = new CommandUpdate
        {
            TypeCommand = "TAKE_ORDER",
            OrderId = orderId
        };

        string json = JsonConvert.SerializeObject(command);
        byte[] data = Encoding.UTF8.GetBytes(json);
        var lengthBytes = BitConverter.GetBytes(data.Length);

        await _tcpStream.WriteAsync(lengthBytes, 0, lengthBytes.Length);
        await _tcpStream.WriteAsync(data, 0, data.Length, _cancellationTokenSource.Token);

        Debug.Log($"[TCP] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ TAKE_ORDER –¥–ª—è –∑–∞–∫–∞–∑–∞ {orderId}");
    }

    public async void PickupOrder(string orderId)
    {
        if (_tcpStream == null || !_tcpClient.Connected) return;

        var command = new CommandUpdate
        {
            TypeCommand = "PICKUP_ORDER",
            OrderId = orderId
        };

        string json = JsonConvert.SerializeObject(command);
        byte[] data = Encoding.UTF8.GetBytes(json);
        var lengthBytes = BitConverter.GetBytes(data.Length);

        await _tcpStream.WriteAsync(lengthBytes, 0, lengthBytes.Length);
        await _tcpStream.WriteAsync(data, 0, data.Length, _cancellationTokenSource.Token);

        Debug.Log($"[TCP] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ PICKUP_ORDER –¥–ª—è –∑–∞–∫–∞–∑–∞ {orderId}");
    }

    public async void DeliverOrder(string orderId)
    {
        if (_tcpStream == null || !_tcpClient.Connected) return;

        var command = new CommandUpdate
        {
            TypeCommand = "DELIVER_ORDER",
            OrderId = orderId
        };

        string json = JsonConvert.SerializeObject(command);
        byte[] data = Encoding.UTF8.GetBytes(json);
        var lengthBytes = BitConverter.GetBytes(data.Length);

        await _tcpStream.WriteAsync(lengthBytes, 0, lengthBytes.Length);
        await _tcpStream.WriteAsync(data, 0, data.Length, _cancellationTokenSource.Token);

        Debug.Log($"[TCP] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ DELIVER_ORDER –¥–ª—è –∑–∞–∫–∞–∑–∞ {orderId}");
    }
    
    public async void SendAnimationState(string animState)
    {
        if (string.IsNullOrEmpty(PlayerId) || _tcpStream == null) return;

        var update = new AnimationStateUpdate
        {
            PlayerId = PlayerId,
            AnimationState = animState
        };

        var updates = new[] { update };
        string json = JsonConvert.SerializeObject(updates);
        byte[] data = Encoding.UTF8.GetBytes(json);
        var lengthBytes = BitConverter.GetBytes(data.Length);

        await _tcpStream.WriteAsync(lengthBytes, 0, lengthBytes.Length);
        await _tcpStream.WriteAsync(data, 0, data.Length);
    }

    // ======================
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    // ======================

    public async void DisconnectFromServer()
    {
        if (_cancellationTokenSource != null && !_cancellationTokenSource.IsCancellationRequested)
        {
            _cancellationTokenSource.Cancel();
        }

        _tcpClient?.Close();
        _udpClient?.Close();

        
        if (_tcpStream == null || !_tcpClient.Connected) return;

        var command = new CommandUpdate
        {
            TypeCommand = "EXIT"
        };

        string json = JsonConvert.SerializeObject(command);
        byte[] data = Encoding.UTF8.GetBytes(json);
        var lengthBytes = BitConverter.GetBytes(data.Length);

        await _tcpStream.WriteAsync(lengthBytes, 0, lengthBytes.Length);
        await _tcpStream.WriteAsync(data, 0, data.Length, _cancellationTokenSource.Token);

        Debug.Log("[TCP] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ EXIT");
        PlayerId = "";
    }

    private void OnApplicationQuit() => DisconnectFromServer();
    private void OnDestroy() => DisconnectFromServer();
}